#include <stddef.h>
#include <stdio.h>
#include <vector>
#include <string.h>

#include <3ds.h>

#include "../system.h"
#include "../types.h"
#include "util.h"
#include "ui.h"

static unsigned char asciiData[128][8] = {
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x3E, 0x41, 0x55, 0x41, 0x55, 0x49, 0x3E },
        { 0x00, 0x3E, 0x7F, 0x6B, 0x7F, 0x6B, 0x77, 0x3E },
        { 0x00, 0x22, 0x77, 0x7F, 0x7F, 0x3E, 0x1C, 0x08 },
        { 0x00, 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08 },
        { 0x00, 0x08, 0x1C, 0x2A, 0x7F, 0x2A, 0x08, 0x1C },
        { 0x00, 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x08, 0x1C },
        { 0x00, 0x00, 0x1C, 0x3E, 0x3E, 0x3E, 0x1C, 0x00 },
        { 0xFF, 0xFF, 0xE3, 0xC1, 0xC1, 0xC1, 0xE3, 0xFF },
        { 0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00 },
        { 0xFF, 0xFF, 0xE3, 0xDD, 0xDD, 0xDD, 0xE3, 0xFF },
        { 0x00, 0x0F, 0x03, 0x05, 0x39, 0x48, 0x48, 0x30 },
        { 0x00, 0x08, 0x3E, 0x08, 0x1C, 0x22, 0x22, 0x1C },
        { 0x00, 0x18, 0x14, 0x10, 0x10, 0x30, 0x70, 0x60 },
        { 0x00, 0x0F, 0x19, 0x11, 0x13, 0x37, 0x76, 0x60 },
        { 0x00, 0x08, 0x2A, 0x1C, 0x77, 0x1C, 0x2A, 0x08 },
        { 0x00, 0x60, 0x78, 0x7E, 0x7F, 0x7E, 0x78, 0x60 },
        { 0x00, 0x03, 0x0F, 0x3F, 0x7F, 0x3F, 0x0F, 0x03 },
        { 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x2A, 0x1C, 0x08 },
        { 0x00, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66 },
        { 0x00, 0x3F, 0x65, 0x65, 0x3D, 0x05, 0x05, 0x05 },
        { 0x00, 0x0C, 0x32, 0x48, 0x24, 0x12, 0x4C, 0x30 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F },
        { 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x2A, 0x1C, 0x3E },
        { 0x00, 0x08, 0x1C, 0x3E, 0x7F, 0x1C, 0x1C, 0x1C },
        { 0x00, 0x1C, 0x1C, 0x1C, 0x7F, 0x3E, 0x1C, 0x08 },
        { 0x00, 0x08, 0x0C, 0x7E, 0x7F, 0x7E, 0x0C, 0x08 },
        { 0x00, 0x08, 0x18, 0x3F, 0x7F, 0x3F, 0x18, 0x08 },
        { 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x7F, 0x7F },
        { 0x00, 0x00, 0x14, 0x22, 0x7F, 0x22, 0x14, 0x00 },
        { 0x00, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x7F },
        { 0x00, 0x7F, 0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18 },
        { 0x00, 0x36, 0x36, 0x14, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36 },
        { 0x00, 0x08, 0x1E, 0x20, 0x1C, 0x02, 0x3C, 0x08 },
        { 0x00, 0x60, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x06 },
        { 0x00, 0x3C, 0x66, 0x3C, 0x28, 0x65, 0x66, 0x3F },
        { 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00 },
        { 0x00, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06 },
        { 0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60 },
        { 0x00, 0x00, 0x36, 0x1C, 0x7F, 0x1C, 0x36, 0x00 },
        { 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x60 },
        { 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60 },
        { 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 },
        { 0x00, 0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C },
        { 0x00, 0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E },
        { 0x00, 0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E },
        { 0x00, 0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C },
        { 0x00, 0x0C, 0x1C, 0x2C, 0x4C, 0x7E, 0x0C, 0x0C },
        { 0x00, 0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C },
        { 0x00, 0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C },
        { 0x00, 0x7E, 0x66, 0x0C, 0x0C, 0x18, 0x18, 0x18 },
        { 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C },
        { 0x00, 0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C },
        { 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00 },
        { 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30 },
        { 0x00, 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06 },
        { 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00 },
        { 0x00, 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60 },
        { 0x00, 0x3C, 0x66, 0x06, 0x1C, 0x18, 0x00, 0x18 },
        { 0x00, 0x38, 0x44, 0x5C, 0x58, 0x42, 0x3C, 0x00 },
        { 0x00, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66 },
        { 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C },
        { 0x00, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C },
        { 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C },
        { 0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E },
        { 0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60 },
        { 0x00, 0x3C, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x3C },
        { 0x00, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66 },
        { 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C },
        { 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x6C, 0x6C, 0x38 },
        { 0x00, 0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66 },
        { 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E },
        { 0x00, 0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63 },
        { 0x00, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63 },
        { 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C },
        { 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60 },
        { 0x00, 0x3C, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x06 },
        { 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66 },
        { 0x00, 0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C },
        { 0x00, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18 },
        { 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E },
        { 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18 },
        { 0x00, 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63 },
        { 0x00, 0x63, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x63 },
        { 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18 },
        { 0x00, 0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E },
        { 0x00, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E },
        { 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00 },
        { 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78 },
        { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F },
        { 0x00, 0x0C, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E },
        { 0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C },
        { 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C },
        { 0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E },
        { 0x00, 0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C },
        { 0x00, 0x1C, 0x36, 0x30, 0x30, 0x7C, 0x30, 0x30 },
        { 0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C },
        { 0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66 },
        { 0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C },
        { 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x6C, 0x6C, 0x38 },
        { 0x00, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66 },
        { 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 },
        { 0x00, 0x00, 0x00, 0x63, 0x77, 0x7F, 0x6B, 0x6B },
        { 0x00, 0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x66 },
        { 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C },
        { 0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60 },
        { 0x00, 0x00, 0x3C, 0x6C, 0x6C, 0x3C, 0x0D, 0x0F },
        { 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x60, 0x60 },
        { 0x00, 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C },
        { 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18 },
        { 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E },
        { 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18 },
        { 0x00, 0x00, 0x00, 0x63, 0x6B, 0x6B, 0x6B, 0x3E },
        { 0x00, 0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66 },
        { 0x00, 0x00, 0x00, 0x66, 0x66, 0x3E, 0x06, 0x3C },
        { 0x00, 0x00, 0x00, 0x3C, 0x0C, 0x18, 0x30, 0x3C },
        { 0x00, 0x0E, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0E },
        { 0x00, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18 },
        { 0x00, 0x70, 0x18, 0x18, 0x0C, 0x18, 0x18, 0x70 },
        { 0x00, 0x00, 0x00, 0x3A, 0x6C, 0x00, 0x00, 0x00 },
        { 0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x41, 0x7F }
};

UIResult result = NONE;

UIResult uiGetResult() {
    UIResult res = result;
    result = NONE;
    return res;
}

int uiGetIndex(int x, int y, u16 fbWidth, u16 fbHeight) {
    return ((fbWidth - y - 1) + x * fbWidth) * 3;
}

void uiFill(u8* fb, u16 fbWidth, u16 fbHeight, int x, int y, int width, int height, u8 r, u8 g, u8 b) {
    if(fb == NULL) {
        return;
    }

    int swidth = fbHeight;
    int sheight = fbWidth;
    if(x + width < 0 || y + height < 0 || x >= swidth || y >= sheight) {
        return;
    }

    if(x < 0) {
        width += x;
        x = 0;
    }

    if(y < 0) {
        height += y;
        y = 0;
    }

    if(x + width >= swidth){
        width = swidth - x;
    }

    if(y + height >= sheight){
        height = sheight - y;
    }

    u8 colorLine[height * 3];
    for(int ly = 0; ly < height; ly++) {
        colorLine[ly * 3 + 0] = b;
        colorLine[ly * 3 + 1] = g;
        colorLine[ly * 3 + 2] = r;
    }

    u8* fbAddr = fb + uiGetIndex(x, y, fbWidth, fbHeight) - (height * 3);
    for(int dx = 0; dx < width; dx++) {
        memcpy(fbAddr, colorLine, (size_t) (height * 3));
        fbAddr += sheight * 3;
    }
}

void uiDrawChar(u8* fb, u16 fbWidth, u16 fbHeight, char c, int x, int y, u8 r, u8 g, u8 b) {
    if(fb == NULL) {
        return;
    }

    unsigned char* data = asciiData[(int) c];
    for(int cy = 0; cy < 8; cy++) {
        if(y + cy < 0 || y + cy >= fbWidth) {
            continue;
        }

        unsigned char l = data[cy];
        for(int cx = 0; cx < 8; cx++) {
            if(x + cx < 0 || x + cx >= fbHeight) {
                continue;
            }

            if((0b10000000 >> cx) & l) {
                u8* ptr = &fb[uiGetIndex(x + cx, y + cy, fbWidth, fbHeight)];
                *(ptr + 0) = b;
                *(ptr + 1) = g;
                *(ptr + 2) = r;
            }
        }
    }
}

void uiDrawString(u8* fb, u16 fbWidth, u16 fbHeight, const char* string, int x, int y, u8 r, u8 g, u8 b) {
    if(fb == NULL) {
        return;
    }

    int len = (int) strlen(string);
    int cx = x;
    int cy = y;
    for(int i = 0; i < len; i++) {
        char c = string[i];
        if(c == '\n') {
            cx = x;
            cy += 8;
        }

        if(cx > fbHeight - 8) {
            break;
        }

        uiDrawChar(fb, fbWidth, fbHeight, c, cx, cy, r, g, b);
        cx += 8;
    }
}

void uiClear() {
    // Clear screen buffers.
    for(int i = 0; i < 2; i++) {
        u16 fbWidth, fbHeight;
        u8* fb = gfxGetFramebuffer(GFX_BOTTOM, GFX_LEFT, &fbWidth, &fbHeight);
        uiFill(fb, fbWidth, fbHeight, 0, 0, fbHeight, fbWidth, 0, 0, 0);
        gfxFlushBuffers();
        gfxSwapBuffers();
        gspWaitForVBlank();
    }
}

const char* uiDisplaySelector(std::vector<char*>* contents) {
    char* selected = NULL;
    unsigned int cursor = 0;
    unsigned int scroll = 0;
    int horizScroll = 0;
    u64 horizEndTime = 0;
    while(aptMainLoop()) {
        u16 fbWidth, fbHeight;
        u8* fb = gfxGetFramebuffer(GFX_BOTTOM, GFX_LEFT, &fbWidth, &fbHeight);
        hidScanInput();
        if(hidKeysDown() & KEY_TOUCH) {
            touchPosition pos;
            hidTouchRead(&pos);
            if(pos.px >= fbHeight - 36 && pos.py >= fbWidth - 24 && pos.px < fbHeight && pos.py < fbWidth) {
                result = EXIT;
                break;
            }
        }

        if(hidKeysDown() & KEY_TOUCH) {
            result = HIDE;
            break;
        }

        if(hidKeysDown() & KEY_B) {
            result = BACK;
            break;
        }

        if(hidKeysDown() & KEY_A) {
            selected = strdup(contents->at(cursor));
            result = SUCCESS;
            break;
        }

        if(hidKeysDown() & KEY_DOWN && cursor < contents->size() - 1) {
            cursor++;
            if(cursor - scroll >= 20) {
                scroll++;
            }

            horizScroll = 0;
            horizEndTime = 0;
        }

        if(hidKeysDown() & KEY_UP && cursor > 0) {
            cursor--;
            if(cursor - scroll < 0) {
                scroll--;
            }

            horizScroll = 0;
            horizEndTime = 0;
        }

        uiFill(fb, fbWidth, fbHeight, 0, 0, fbHeight, fbWidth, 0, 0, 0);
        int i = 0;
        for(std::vector<char*>::iterator it = contents->begin() + scroll; it != contents->end(); it++) {
            u8 color = 255;
            int offset = 0;
            if(i + scroll == cursor) {
                uiFill(fb, fbWidth, fbHeight, 0, i * 12, fbHeight, 8, 255, 255, 255);
                color = 0;
                u32 width = strlen(*it) * 8;
                if(width > fbHeight) {
                    if(-horizScroll + fbHeight >= width) {
                        if(horizEndTime == 0) {
                            horizEndTime = osGetTime();
                        } else if(osGetTime() - horizEndTime >= 4000) {
                            horizScroll = 0;
                            horizEndTime = 0;
                        }
                    } else {
                        horizScroll -= 1;
                    }
                }

                offset = horizScroll;
            }

            uiDrawString(fb, fbWidth, fbHeight, *it, offset, i * 12, color, color, color);
            i++;
            if(i >= 20) {
                break;
            }
        }

        uiFill(fb, fbWidth, fbHeight, fbHeight - 36, fbWidth - 24, 36, 16, 255, 0, 0);
        uiDrawString(fb, fbWidth, fbHeight, "EXIT", fbHeight - 34, fbWidth - 20, 255, 255, 255);

        gfxFlushBuffers();
        gfxSwapBuffers();
        gspWaitForVBlank();
    }

    return selected;
}

const char* uiSelectFile(const char* directory, const char* extension) {
    const char* selectResult = NULL;
    std::vector<char*>* contents = getDirectoryContents(directory, extension);
    while(true) {
        const char *selected = uiDisplaySelector(contents);
        UIResult res = uiGetResult();
        if(res != SUCCESS) {
            result = res;
            break;
        }

        if(strcmp(selected, "..") == 0) {
            result = BACK;
            break;
        }

        if(strcmp(selected, ".") == 0) {
            continue;
        }

        char* path = (char*) systemAlloc(strlen(directory) + strlen(selected) + 2);
        snprintf(path, strlen(directory) + strlen(selected) + 2, "%s/%s", directory, selected);
        if(isDirectory(path)) {
            const char *select = uiSelectFile(path, extension);
            systemFree(path);
            UIResult dirRes = uiGetResult();
            if(dirRes == BACK) {
                continue;
            }

            result = dirRes;
            selectResult = select;
            break;
        } else {
            result = SUCCESS;
            selectResult = path;
            break;
        }
    }

    delete(contents);
    return selectResult;
}

void uiDisplaySpeed(int speed)
{
    u16 fbWidth, fbHeight;
    u8* fb = gfxGetFramebuffer(GFX_BOTTOM, GFX_LEFT, &fbWidth, &fbHeight);

    char display[4];
    sprintf(display, "%d%%", speed);

    uiFill(fb, fbWidth, fbHeight, fbHeight - 34, fbWidth - 20, 30, 20, 0, 0, 0);
    uiDrawString(fb, fbWidth, fbHeight, display, fbHeight - 34, fbWidth - 20, 255, 255, 255);
}
